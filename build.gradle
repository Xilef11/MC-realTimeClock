plugins {
	id 'fabric-loom' version '0.2.2-SNAPSHOT'
	id 'maven-publish'
	id "co.riiid.gradle" version "0.4.2"
	id "com.matthewprenger.cursegradle" version "1.2.0"
}



import java.util.regex.Pattern
//--- build aliases : define a synonym here if you want a shortcut to run multiple targets
 //https://caffeineinduced.wordpress.com/2015/01/25/run-a-list-of-gradle-tasks-in-specific-order/
def buildAliases = [
   'release' : ['setReleaseNumber', 'build', 'githubRelease', 'curseforge', 'incrementBuildNumber']
   //'release' : ['setReleaseNumber', 'build']
]
def expandedTaskList = []
 
gradle.startParameter.taskNames.each {
   expandedTaskList << (buildAliases[it] ? buildAliases[it] : it)
}
 
gradle.startParameter.taskNames = expandedTaskList.flatten()
 
println "\n\texpanded task list: ${gradle.startParameter.taskNames }\n"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = "${project.minecraft_version}-${project.mod_major}.${project.mod_minor}-dev"
group = project.maven_group

//must be run before all other configs (but after initially setting the version)
task('setReleaseNumber') {
	//println "setRelease: config"
	if(gradle.startParameter.taskNames.contains('setReleaseNumber')){
		print "setReleaseNumber changing "+project.version+" to "
		project.setProperty('version',"${project.minecraft_version}-${project.mod_major}.${project.mod_minor}")
		println project.version
	}
}

minecraft {
	//replaceIn "Refs.java"
	//replace "@VERSION@", project.version 
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}"
	modCompile "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modCompile "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
}

tasks.withType(JavaCompile) {
		options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
		options.encoding = "UTF-8"
}
processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
	
	from(sourceSets.main.java.srcDirs){
		include "Refs.java"
		expand "@VERSION@": project.version
	}
	from(sourceSets.main.java.srcDirs){
		exclude "Refs.java"
	}
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

//custom tasks and configs

task('incrementBuildNumber') {
 doLast{
//http://stackoverflow.com/questions/17448565/how-to-autoincrement-versioncode-in-android-gradle
	def buildscript = file("gradle.properties")
	def manifestContent=""
	def versionCode=""
	def buildnum=""
	
	def pattern = Pattern.compile("mod_minor = (\\d+)")
	def text = buildscript.getText()
	def matcher = pattern.matcher(text)
	
	matcher.find()
	versionCode = Integer.parseInt(matcher.group(1))
	manifestContent = matcher.replaceAll("mod_minor = " + ++versionCode)
	buildnum="${project.minecraft_version}-${project.mod_major}.${versioncode}"
	println "incremented build number to ${buildnum}"
	
    buildscript.write(manifestContent)
	
	//commit
	//"git commit -a -m \"Increment version to ${buildnum} after release [ci skip]\"".execute()
	//"git push".execute()//push the updated build number
 }
}
task gitPush {
	doLast{
		"git push".execute()
	}
}
//https://github.com/riiid/gradle-github-plugin
githubRelease.onlyIf{project.hasProperty('githubKey')}
githubRelease.dependsOn(gitPush)//make sure everything is pushed before release so github tags the right thing
github {
	if(project.hasProperty('githubKey')){
		//println "github: "+project.version
		owner = 'Xilef11'
		repo = 'MC-realTimeClock'
		token = project.githubKey
		tagName = 'v'+project.version
		name=tagName
		targetCommitish = 'master'
		draft=false
		prerelease = project.version.contains("-dev")
		body = "Changelog:\n"+file('changelog.md').getText()+"\n\nBuilt with Fabric "+project.fabric_version
		assets = [
				"build/libs/${project.archivesBaseName}-${project.version}.jar"
				//,"build/libs/${project.archivesBaseName}-${project.version}-sources.jar"
		]
	}else{
		println "no GitHub token found as project.githubKey"
	}
}
/*
//https://github.com/matthewprenger/CurseGradle
tasks.curseforge.onlyIf{project.hasProperty('curseKey')}
curseforge {
if(project.hasProperty('curseKey')){
	  apiKey = project.curseKey
	  project {
		id = '229797'
		changelogType='markdown'
		changelog = file('changelog.md').getText()+"\n\nBuilt with Fabric "+project.fabric_version
		releaseType = project.version.contains("-dev") ? 'alpha' : 'release'
		addGameVersion project.minecraft_version
		addGameVersion "Java 8"
		
		relations{
			requiredLibrary 'fabric'
		}
		afterEvaluate {
			mainArtifact(remapJar.output)
			uploadTask.dependsOn(remapJar)
		}
	  }
	  options {
		forgeGradleIntegration = false
	  }
  }else{
	println "no CurseForge key found as project.curseKey"
  }
}
*/